import yaml
import pandas as pd
import sys
import gspread
from oauth2client.service_account import ServiceAccountCredentials


def set_dirs(folders):
    ''' –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—ñ —à–ª—è—Ö–∏ –¥–æ —Ñ–æ–ª–¥–µ—Ä—ñ–≤ –∫–æ–¥—É —ñ –¥–∞–Ω–∏—Ö '''
    # –ö–æ—Ä–µ–Ω–µ–≤—ñ –¥—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–æ–º–ø–∞
    base = folders['base']
    
    # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    code_dir = base + folders['vaults_storage'] + folders['code_dir']
    data_dir = base + folders['vaults_storage'] + folders['data_dir']
    
    # –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–æ–ª–¥–µ—Ä–∞ –∫–æ–¥—É
    sys.path.insert(0, code_dir)
    
    return code_dir, data_dir


def read_yaml_config(config_file: str='config.yml', 
                     config_gs_file: str='config_gs.yml') -> dict:
    ''' –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ '''
    with open(config_file) as f:
        conf = yaml.load(f, Loader=yaml.SafeLoader)
    with open(config_gs_file) as f:
        conf_gs = yaml.load(f, Loader=yaml.SafeLoader)
    for k in conf.keys():
        conf[k]['gs_id'] = conf_gs['gs_id'][k]
    conf = {'tables': conf}
    conf['gs_domain'] = conf_gs['gs_domain']
    return conf

def get_gs_table_url(conf: dict, table: str) -> str:
    ''' –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL —Ç–∞–±–ª–∏—Ü—ñ `table` (Google Sheets) –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ 
    —Å–ª–æ–≤–Ω–∏–∫–∞ `conf` '''
    tables = list(conf['tables'])
    if table not in tables:
        sys.exit(f'üö© –¢–∞–±–ª–∏—Ü—è `{table}` –≤—ñ–¥—Å—É—Ç–Ω—è —Å–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü—å {tables}')
    return conf['gs_domain'] + conf['tables'][table]['gs_id'] + '/edit#gid=0'

def read_gs_by_url(table_url: str, 
                   cred_json_file: str='credentials.json') -> pd.DataFrame:
    ''' –ë–µ–∑–ø–µ—á–Ω–µ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Google Sheets –∑–∞ —ó—ó URL `table_url` –∑
    –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á—ñ–≤ –±–µ–∑–ø–µ–∫–∏ Google Cloud –∑ JSON-—Ñ–∞–π–ª—É `cred_json_file` '''
    SCOPES = [
        'https://spreadsheets.google.com/feeds', 
        'https://www.googleapis.com/auth/drive']

    creds = ServiceAccountCredentials.from_json_keyfile_name(cred_json_file, SCOPES)
    client = gspread.authorize(creds)

    # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ URL
    spreadsheet = client.open_by_url(table_url)
    worksheet = spreadsheet.sheet1

    # –í—Å—ñ –¥–∞–Ω—ñ
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    
    return df

''' KEY_LISTS - –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏:
  - cols - –≤—Å—ñ —Å—Ç–æ–≤–ø—á–∏–∫–∏, 
  - frontmatter - –º—ñ—Ç–∫–∏ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç–µ—Ä—ñ—ó –Ω–æ—Ç–∞—Ç–∫–∏ –û–±—Å—ñ–¥—ñ–∞–Ω, 
  - sections - –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–æ–∑–¥—ñ–ª—ñ–≤ –Ω–æ—Ç–∞—Ç–∫–∏ –û–±—Å—ñ–¥—ñ–∞–Ω, 
  - not_required - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ì—É–≥–ª –§–æ—Ä–º–∏', 
  - pers_name - —Å—Ç–æ–≤–ø—á–∏–∫–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è: –ü.–Ü.–ë. -> –Ü.–ü., 
  - linked - —Å—Ç–æ–≤–ø—á–∏–∫–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è: value -> [[value]]
'''
KEY_LISTS = ['cols', 'frontmatter', 'sections', 'not_required', 'pers_name', 'linked']

def check_table_struct(df: pd.DataFrame, TBL_STRUCT: dict) -> list[str]:
    ''' –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ —ñ —Å–ª–æ–≤–Ω–∏–∫–∞ –∑ 
    –æ–ø–∏—Å–æ–º –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω.
    –í—Ö—ñ–¥–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏:
        df - –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏;
        TBL_STRUCT - –æ–ø–∏—Å–æ–º –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω.
    –ü–æ–≤–µ—Ä—Ç–∞—î:
        problems - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ —Å–ª–æ–≤–Ω–∏–∫–∞ `cond`, –¥–µ –≤–∏–Ω–∏–∫–ª–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ 
        (False) –∫–ª—é—á–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ `TBL_STRUCT`, `cols`, `df.columns`, 
        `tbl_struct_keys`; —è–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, —Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.
    '''
    def clean_str(lst: str | list[str]) -> str | list[str]:
        ''' –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —É —Ä—è–¥–∫—É –ø–æ –∫—Ä–∞—è—Ö —ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ  '''
        if isinstance(lst, str):
            lst = ' '.join(lst.split())
        elif isinstance(lst, list):
            lst = [' '.join(s.split()) for s in lst]
        else:
            sys.exit(f'üö© –ê–±–æ str –∞–±–æ list[str]: {lst}')
        return lst
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î `lst` –ø—ñ–¥–º–Ω–æ–∂–∏–Ω–æ—é `cols`, —è–∫—â–æ `lst` –ø–æ—Ä–æ–∂–Ω—î, —Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î True
    check_cols = lambda lst: True if len(lst) == 0 else set(lst).issubset(cols)

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –≤—Ö. –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É df
    c = clean_str(list(df.columns))
    c_map = {a:b for (a,b) in zip(df.columns, c)}
    df.rename(columns=c_map, inplace=True)
    
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —É –µ–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–ø–∏—Å–∫—ñ–≤ `KEY_LISTS` –∑ `TBL_STRUCT`
    for lst in KEY_LISTS:
        TBL_STRUCT[lst] = clean_str(TBL_STRUCT[lst])
    for k, v in TBL_STRUCT['label_refs'].items():
        TBL_STRUCT['label_refs'][k] = clean_str(v)

    # —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ
    cols = set(TBL_STRUCT['cols'])
    # –í—Å—ñ –∫–ª—é—á—ñ —Å–ª–æ–≤–Ω–∏–∫–∞ `TBL_STRUCT`
    tbl_struct_keys = ['subdir', 'name', 'cols', 'frontmatter', 'sections', 
                       'not_required', 'pers_name', 'linked', 'label_refs', 
                       'label_vals', 'gs_id']
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤
    cond = {
        'tbl_struct_keys': set(TBL_STRUCT.keys()) == set(tbl_struct_keys),
        'df_columns':   cols.issubset(set(df.columns)),
        'frontmatter':  check_cols(TBL_STRUCT['frontmatter']),
        'label_refs':   check_cols(TBL_STRUCT['label_refs'].values()),
        'linked':       check_cols(TBL_STRUCT['linked']),
        'not_required': check_cols(TBL_STRUCT['not_required']),
        'pers_name':    check_cols(TBL_STRUCT['pers_name']),
        'sections':     check_cols(TBL_STRUCT['sections']),
        }
    # –°–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ —Å–ª–æ–≤–Ω–∏–∫–∞ `cond`, –¥–µ –≤–∏–Ω–∏–∫–ª–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (False)
    problems = [k for k, v in cond.items() if not v]
    return problems

def read_check_gs_table(table: str, code_dir: str) -> (pd.DataFrame, dict):
    ''' –ó—á–∏—Ç—É—î –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ `table` —ñ –æ–ø–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ 
    –û–±—Å—ñ–¥—ñ–∞–Ω. –ü–æ–≤–µ—Ä—Ç–∞—î:
        df - —Ç–∞–±–ª–∏—Ü—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É –≤–∏–≥–ª—è–¥—ñ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É
        TBL_STRUCT - –æ–ø–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω 
    '''
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É
    config_file = code_dir + 'config.yml'
    config_gs_file = code_dir + 'config_gs.yml'
    cred_file = code_dir + 'credentials.json'
    
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    conf = read_yaml_config(config_file, config_gs_file)
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL —Ç–∞–±–ª–∏—Ü—ñ
    table_url = get_gs_table_url(conf, table)
    # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Google Sheets –∑–∞ —ó—ó URL
    df = read_gs_by_url(table_url, cred_file)
    
    if len(df) == 0:
        sys.exit(f'üö© –¢–∞–±–ª–∏—Ü—è `{table}` –ø–æ—Ä–æ–∂–Ω—è!')
    else:
        print(f'‚úÖ –†–æ–∑–º—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ `{table}` - {df.shape}')
    
    # –û–ø–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ `table` –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω
    TBL_STRUCT = conf['tables'][table] # 
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ —ñ —Å–ª–æ–≤–Ω–∏–∫–∞ –æ–ø–∏—Å—É –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è
    problems = check_table_struct(df, TBL_STRUCT)
    
    # –Ø–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, —Ç–æ —Å–ø–∏—Å–æ–∫ `problems` –ø–æ—Ä–æ–∂–Ω—ñ–π
    if problems:
        sys.exit(f'üö© –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ `{table}` —Ç–∞–∫—ñ: {problems}')
    else:
        print(f'‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ `{table}` –ø—Ä–æ–π–¥–µ–Ω–∞')

    return df, TBL_STRUCT

def pib2ip(dfgf: pd.DataFrame, TBL_STRUCT: dict) -> pd.DataFrame:
    ''' –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É `TBL_STRUCT['pers_name']` –∑ 
    –≤—Ö—ñ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É: "–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ" -> "–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ"
    '''
    for pn in TBL_STRUCT['pers_name']:
        pns = dfgf[pn]
        names = []
        for i, v in pns.items():
            vl = v.split()
            if len(vl) != 3:
                sys.exit(f'üö© –ó–∞–ø–∏—Å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 3 –µ–ª–µ–º–µ–Ω—Ç–∏ - –ü.–Ü.–ë.: {v}')
            names.append(' '.join([vl[1], vl[0]]))
        dfgf[pn] = names
    return dfgf

