import yaml
import pandas as pd
import sys
import gspread
from oauth2client.service_account import ServiceAccountCredentials

class GS2ON_Convertor():
    ''' Google Sheets to Obsidian notes convertor '''

    ''' KEY_LISTS - –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏:
    - cols - –≤—Å—ñ —Å—Ç–æ–≤–ø—á–∏–∫–∏, 
    - frontmatter - –º—ñ—Ç–∫–∏ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç–µ—Ä—ñ—ó –Ω–æ—Ç–∞—Ç–∫–∏ –û–±—Å—ñ–¥—ñ–∞–Ω, 
    - sections - –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–æ–∑–¥—ñ–ª—ñ–≤ –Ω–æ—Ç–∞—Ç–∫–∏ –û–±—Å—ñ–¥—ñ–∞–Ω, 
    - not_required - –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ì—É–≥–ª –§–æ—Ä–º–∏', 
    - pers_name - —Å—Ç–æ–≤–ø—á–∏–∫–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è: –ü.–Ü.–ë. -> –Ü.–ü., 
    - linked - —Å—Ç–æ–≤–ø—á–∏–∫–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è: value -> [[value]]
    '''
    KEY_LISTS = ['cols', 'frontmatter', 'sections', 'not_required', 'pers_name', 
                 'linked']
    # –í—Å—ñ –∫–ª—é—á—ñ —Å–ª–æ–≤–Ω–∏–∫–∞ `TBL_STRUCT`
    tbl_struct_keys = ['subdir', 'name', 'cols', 'frontmatter', 'sections', 
                       'not_required', 'pers_name', 'linked', 'label_refs', 
                       'label_vals', 'gs_id']

    def __init__(self, folders: dict):
        ''' –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤–Ω—ñ —à–ª—è—Ö–∏ –¥–æ —Ñ–æ–ª–¥–µ—Ä—ñ–≤ –∫–æ–¥—É —ñ –¥–∞–Ω–∏—Ö '''
        # –ö–æ—Ä–µ–Ω–µ–≤—ñ –¥—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∫–æ–º–ø–∞
        base = folders['base']
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        self.code_dir = base + folders['vaults_storage'] + folders['code_dir']
        self.data_dir = base + folders['vaults_storage'] + folders['data_dir']
        
        # –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–æ–ª–¥–µ—Ä–∞ –∫–æ–¥—É
        sys.path.insert(0, self.code_dir)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É
        self.config_file = self.code_dir + 'config.yml'
        self.config_gs_file = self.code_dir + 'config_gs.yml'
        self.cred_file = self.code_dir + 'credentials.json'
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ self.conf
        self.read_yaml_config()

    def read_yaml_config(self):
        ''' –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —Ñ–∞–π–ª—ñ–≤ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 
        –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ '''
        with open(self.config_file) as f:
            conf = yaml.load(f, Loader=yaml.SafeLoader)
        with open(self.config_gs_file) as f:
            conf_gs = yaml.load(f, Loader=yaml.SafeLoader)
        for k in conf.keys():
            conf[k]['gs_id'] = conf_gs['gs_id'][k]
        conf = {'tables': conf}
        conf['gs_domain'] = conf_gs['gs_domain']
        self.conf = conf

    def read_gs_table(self, table):
        ''' –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ñ, —â–æ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —É conf['tables'].
        –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –º–∞—î –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏–π –º–µ—Ç–æ–¥ read_yaml_config. '''
        ''' –ë–µ–∑–ø–µ—á–Ω–µ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Google Sheets –∑–∞ —ó—ó URL `table_url` –∑
        –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á—ñ–≤ –±–µ–∑–ø–µ–∫–∏ Google Cloud –∑ JSON-—Ñ–∞–π–ª—É `cred_file` '''

        tables = list(self.conf['tables'])
        if table not in tables:
            sys.exit(f'üö© –¢–∞–±–ª–∏—Ü—è `{table}` –≤—ñ–¥—Å—É—Ç–Ω—è —Å–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü—å {tables}')

        # –û–ø–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ `table` –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω
        self.TBL_STRUCT = self.conf['tables'][table]

        # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ Google Sheets –∑–∞ —ó—ó URL, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É self.dfgf

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è URL —Ç–∞–±–ª–∏—Ü—ñ self.table_url
        self.table_url = self.conf['gs_domain'] + \
            self.conf['tables'][table]['gs_id'] + '/edit#gid=0'

        SCOPES = [
            'https://spreadsheets.google.com/feeds', 
            'https://www.googleapis.com/auth/drive']

        creds = ServiceAccountCredentials.from_json_keyfile_name(self.cred_file, SCOPES)
        client = gspread.authorize(creds)

        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—ñ –∑–∞ URL
        spreadsheet = client.open_by_url(self.table_url)
        worksheet = spreadsheet.sheet1

        # –í—Å—ñ –¥–∞–Ω—ñ
        data = worksheet.get_all_records()
        self.dfgf = pd.DataFrame(data)

        if len(self.dfgf) == 0:
            sys.exit(f'üö© –¢–∞–±–ª–∏—Ü—è `{table}` –ø–æ—Ä–æ–∂–Ω—è!')
        else:
            print(f'‚úÖ –†–æ–∑–º—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ `{table}` - {self.dfgf.shape}')

        self.table = table

    def check_table_struct(self):
        ''' –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ —ñ —Å–ª–æ–≤–Ω–∏–∫–∞ –∑ 
        –æ–ø–∏—Å–æ–º –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω.
        –í—Ö—ñ–¥–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏:
            dfgf - –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏;
            TBL_STRUCT - –æ–ø–∏—Å–æ–º –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏ –¥–æ –û–±—Å—ñ–¥—ñ–∞–Ω.
        –ü–æ–≤–µ—Ä—Ç–∞—î:
            problems - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ —Å–ª–æ–≤–Ω–∏–∫–∞ `cond`, –¥–µ –≤–∏–Ω–∏–∫–ª–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ 
            (False) –∫–ª—é—á–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ `TBL_STRUCT`, `cols`, `dfgf.columns`, 
            `tbl_struct_keys`; —è–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, —Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.
        '''
        def clean_str(lst: str | list[str]) -> str | list[str]:
            ''' –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ —É —Ä—è–¥–∫—É –ø–æ –∫—Ä–∞—è—Ö —ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ  '''
            if isinstance(lst, str):
                lst = ' '.join(lst.split())
            elif isinstance(lst, list):
                lst = [' '.join(s.split()) for s in lst]
            else:
                sys.exit(f'üö© –ê–±–æ str –∞–±–æ list[str]: {lst}')
            return lst
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î `lst` –ø—ñ–¥–º–Ω–æ–∂–∏–Ω–æ—é `cols`, —è–∫—â–æ `lst` –ø–æ—Ä–æ–∂–Ω—î, —Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î True
        check_cols = lambda lst: True if len(lst) == 0 else set(lst).issubset(cols)

        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —É –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –≤—Ö. –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É dfgf
        c = clean_str(list(self.dfgf.columns))
        c_map = {a:b for (a,b) in zip(self.dfgf.columns, c)}
        self.dfgf.rename(columns=c_map, inplace=True)

        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —É –µ–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–ø–∏—Å–∫—ñ–≤ `KEY_LISTS` –∑ `TBL_STRUCT`
        for lst in self.KEY_LISTS:
            self.TBL_STRUCT[lst] = clean_str(self.TBL_STRUCT[lst])
        for k, v in self.TBL_STRUCT['label_refs'].items():
            self.TBL_STRUCT['label_refs'][k] = clean_str(v)

        # —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤—Ö. —Ç–∞–±–ª–∏—Ü—ñ
        cols = set(self.TBL_STRUCT['cols'])
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∫—ñ–≤
        cond = {
            'tbl_struct_keys': set(self.TBL_STRUCT.keys()) == set(self.tbl_struct_keys),
            'df_columns':   cols.issubset(set(self.dfgf.columns)),
            'frontmatter':  check_cols(self.TBL_STRUCT['frontmatter']),
            'label_refs':   check_cols(self.TBL_STRUCT['label_refs'].values()),
            'linked':       check_cols(self.TBL_STRUCT['linked']),
            'not_required': check_cols(self.TBL_STRUCT['not_required']),
            'pers_name':    check_cols(self.TBL_STRUCT['pers_name']),
            'sections':     check_cols(self.TBL_STRUCT['sections']),
            }
        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤ —Å–ª–æ–≤–Ω–∏–∫–∞ `cond`, –¥–µ –≤–∏–Ω–∏–∫–ª–∏ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ (False)
        problems = [k for k, v in cond.items() if not v]
    
        # –Ø–∫—â–æ –≤—Å–µ –≥–∞—Ä–∞–∑–¥, —Ç–æ —Å–ø–∏—Å–æ–∫ `problems` –ø–æ—Ä–æ–∂–Ω—ñ–π
        if problems:
            sys.exit(f'üö© –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ `{self.table}` —Ç–∞–∫—ñ: {problems}')
        else:
            print(f'‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ `{self.table}` –ø—Ä–æ–π–¥–µ–Ω–∞')

    def pib2ip(self):
        ''' –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É `TBL_STRUCT['pers_name']` –∑ 
        –≤—Ö—ñ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É: "–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ" -> "–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ"
        '''
        for pn in self.TBL_STRUCT['pers_name']:
            pns = self.dfgf[pn]
            names = []
            for i, v in pns.items():
                vl = v.split()
                if len(vl) != 3:
                    sys.exit(f'üö© –ó–∞–ø–∏—Å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 3 –µ–ª–µ–º–µ–Ω—Ç–∏ - –ü.–Ü.–ë.: {v}')
                names.append(' '.join([vl[1], vl[0]]))
            self.dfgf[pn] = names

    def make_linked(self):
        ''' –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É `TBL_STRUCT['linked']` –∑ 
        –≤—Ö—ñ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É —É –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –û–±—Å—ñ–¥—ñ–∞–Ω-–ø–æ—Å–∏–ª–∞–Ω–Ω—è: name -> [[name]] 
        '''
        for name in self.TBL_STRUCT['linked']:
            linked_names = ['[[' + s + ']]' for _, s in self.dfgf[name].items()]
            self.dfgf[name] = linked_names

    def dfgf2dfob(self):
        ''' –ö–æ–ø—ñ—è —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ - –Ω–∞–∑–≤–∏ –º—ñ—Ç–æ–∫ 
        —Ñ—Ä–æ–Ω—Ç–º–∞—Ç–µ—Ä—ñ—ó. –¢–∞–±–ª–∏—Ü—è –≥–æ—Ç—É—î—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫ –û–±—Å—ñ–¥—ñ–∞–Ω.
        '''
        # –ü—Ä—è–º–∞ —ñ –∑–≤–æ—Ä–æ—Ç–Ω—è –º–∞–ø–∏ (–º—ñ—Ç–∫–∏ –Ω–æ—Ç–∞—Ç–æ–∫ –û–±—Å—ñ–¥—ñ–∞–Ω) <--> (–Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—á–∏–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –ì—É–≥–ª –§–æ—Ä–º–∏)
        dfob_cols = self.TBL_STRUCT['label_refs']
        dfob_cols_i = {v: k for k, v in dfob_cols.items()}
    
        dfob = self.dfgf.copy()
        dfob.rename(columns=dfob_cols_i, inplace=True)
        if 'title' not in dfob.columns:
            dfob['title'] = self.dfgf[dfob_cols['title']]

        self.dfob_cols = dfob_cols
        self.dfob = dfob

    def check_duplicates(self):
        ''' –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ —ñ–º–µ–Ω –Ω–æ—Ç–∞—Ç–æ–∫ '''
        idx_dfob_dupl = self.dfob.duplicated(subset='title', keep=False)
        dfgf_dupl = self.dfgf.loc[idx_dfob_dupl]
        if len(dfgf_dupl) > 0:
            print(f'üö© –£ —Ç–∞–±–ª–∏—Ü—ñ {self.table} –≤–∏—è–≤–ª–µ–Ω—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –Ω–∞–∑–≤ –Ω–æ—Ç–∞—Ç–æ–∫:')
            print(self.dfgf[self.dfob_cols['title']].to_markdown())
            sys.exit('‚ö†Ô∏è –£—Å—É–Ω—å—Ç–µ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —ñ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É.')
        return

